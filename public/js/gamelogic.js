'use strict';

/**
 * gamelogic.js
 */

(function () {
	//

	var EPSILON = 1000;
	var config = {};

	// Actions performed when current game settings recieved
	function onAgSetupEvent(event) {
		console.log('agSetupEvent: ' + JSON.stringify(event.detail));
		//
		config.movements = event.detail.commands;
		//
		var audioFileURL = 'http://' + window.location.hostname + '/songs/' + event.detail.song;
		// let audioFileURL = '../audio/' + event.detail.song;
		console.log('audio file url: ' + audioFileURL);
		config.audio = new Howl({
			urls: [audioFileURL],
			autoplay: false,
			volume: 0.8
		});
		// Generate new event for the view.
		var newEvent = new CustomEvent('glSetupEvent', { detail: { song: event.detail.song, bpm: event.detail.bpm, commands: event.detail.commands, music: config.audio } });
		document.dispatchEvent(newEvent);
		// BPM, minInterval, beginning offset
		config.bpm = event.detail.bpm;
		config.minInterval = 60000 / config.bpm;
		config.beginningOffset = event.detail.offset;
		// Start.
		config.score = 0;
		config.startDate = Date.now();
		config.displayedIndex = 0;
		config.lastReceivedIndex = 0;
		function sendMovement() {
			var newEvent = new CustomEvent('glAddMovement', { detail: config.movements[config.displayedIndex] });
			console.log(newEvent);
			document.dispatchEvent(newEvent);
			setTimeout(sendMovement, config.minInterval);
		}
		setTimeout(sendMovement, config.beginningOffset);
		config.audio.start();
	}

	function onAgCommandEvent(event) {
		console.log('agCommandEvent: ' + JSON.stringify(event.detail));
		// Count the time for the current movement.
		var time = config.startDate + config.beginningOffset + config.minInterval * config.lastReceivedIndex;
		// Count new score.
		if (Math.abs(time - event.detail.time) < EPSILON) {
			config.score += 100;
			var newEvent = new CustomEvent('glStatus', { detail: {
					status: "success",
					index: config.lastReceivedIndex,
					newScore: config.score
				} });
			document.dispatchEvent(newEvent);
		} else {
			config.score -= 10;
			var newEvent = new CustomEvent('glStatus', { detail: {
					status: "fail",
					index: config.lastReceivedIndex,
					newScore: config.score
				} });
			document.dispatchEvent(newEvent);
		}
		config.lastReceivedIndex++;
	}

	document.addEventListener('agSetupEvent', onAgSetupEvent);
	document.addEventListener('agCommandEvent', onAgCommandEvent);
})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdhbWVsb2dpYy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFJQSxDQUFDLFlBQVc7OztBQUdSLEtBQUksVUFBVSxJQUFkO0FBQ0EsS0FBSSxTQUFTLEVBQWI7OztBQUdBLFVBQVMsY0FBVCxDQUF3QixLQUF4QixFQUErQjtBQUNsQyxVQUFRLEdBQVIsQ0FBWSxtQkFBbUIsS0FBSyxTQUFMLENBQWUsTUFBTSxNQUFyQixDQUEvQjs7QUFFSSxTQUFPLFNBQVAsR0FBbUIsTUFBTSxNQUFOLENBQWEsUUFBaEM7O0FBRUosTUFBSSxlQUFlLFlBQVksT0FBTyxRQUFQLENBQWdCLFFBQTVCLEdBQXVDLFNBQXZDLEdBQW1ELE1BQU0sTUFBTixDQUFhLElBQW5GOztBQUVBLFVBQVEsR0FBUixDQUFZLHFCQUFxQixZQUFqQztBQUNBLFNBQU8sS0FBUCxHQUFlLElBQUksSUFBSixDQUFTO0FBQ3BCLFNBQU0sQ0FBQyxZQUFELENBRGM7QUFFcEIsYUFBVSxLQUZVO0FBR3BCLFdBQVE7QUFIWSxHQUFULENBQWY7O0FBTUEsTUFBSSxXQUFXLElBQUksV0FBSixDQUNYLGNBRFcsRUFFWCxFQUFDLFFBQVEsRUFBQyxNQUFNLE1BQU0sTUFBTixDQUFhLElBQXBCLEVBQTBCLEtBQUssTUFBTSxNQUFOLENBQWEsR0FBNUMsRUFBaUQsVUFBVSxNQUFNLE1BQU4sQ0FBYSxRQUF4RSxFQUFrRixPQUFPLE9BQU8sS0FBaEcsRUFBVCxFQUZXLENBQWY7QUFJQSxXQUFTLGFBQVQsQ0FBdUIsUUFBdkI7O0FBRUEsU0FBTyxHQUFQLEdBQWEsTUFBTSxNQUFOLENBQWEsR0FBMUI7QUFDQSxTQUFPLFdBQVAsR0FBcUIsUUFBUSxPQUFPLEdBQXBDO0FBQ0EsU0FBTyxlQUFQLEdBQXlCLE1BQU0sTUFBTixDQUFhLE1BQXRDOztBQUVBLFNBQU8sS0FBUCxHQUFlLENBQWY7QUFDQSxTQUFPLFNBQVAsR0FBbUIsS0FBSyxHQUFMLEVBQW5CO0FBQ0EsU0FBTyxjQUFQLEdBQXdCLENBQXhCO0FBQ0EsU0FBTyxpQkFBUCxHQUEyQixDQUEzQjtBQUNBLFdBQVMsWUFBVCxHQUF3QjtBQUNwQixPQUFJLFdBQVcsSUFBSSxXQUFKLENBQ2xCLGVBRGtCLEVBRWxCLEVBQUMsUUFBUSxPQUFPLFNBQVAsQ0FBaUIsT0FBTyxjQUF4QixDQUFULEVBRmtCLENBQWY7QUFJQSxXQUFRLEdBQVIsQ0FBWSxRQUFaO0FBQ0EsWUFBUyxhQUFULENBQXVCLFFBQXZCO0FBQ0EsY0FBVyxZQUFYLEVBQXlCLE9BQU8sV0FBaEM7QUFDSDtBQUNELGFBQVcsWUFBWCxFQUF5QixPQUFPLGVBQWhDO0FBQ0EsU0FBTyxLQUFQLENBQWEsS0FBYjtBQUNJOztBQUVELFVBQVMsZ0JBQVQsQ0FBMEIsS0FBMUIsRUFBaUM7QUFDaEMsVUFBUSxHQUFSLENBQVkscUJBQXFCLEtBQUssU0FBTCxDQUFlLE1BQU0sTUFBckIsQ0FBakM7O0FBRUosTUFBSSxPQUFPLE9BQU8sU0FBUCxHQUFtQixPQUFPLGVBQTFCLEdBQTRDLE9BQU8sV0FBUCxHQUFxQixPQUFPLGlCQUFuRjs7QUFFQSxNQUFJLEtBQUssR0FBTCxDQUFTLE9BQU8sTUFBTSxNQUFOLENBQWEsSUFBN0IsSUFBcUMsT0FBekMsRUFBa0Q7QUFDOUMsVUFBTyxLQUFQLElBQWdCLEdBQWhCO0FBQ0EsT0FBSSxXQUFXLElBQUksV0FBSixDQUNsQixVQURrQixFQUVsQixFQUFDLFFBQVE7QUFDTCxhQUFRLFNBREg7QUFFTCxZQUFPLE9BQU8saUJBRlQ7QUFHTCxlQUFVLE9BQU87QUFIWixLQUFULEVBRmtCLENBQWY7QUFRQSxZQUFTLGFBQVQsQ0FBdUIsUUFBdkI7QUFDSCxHQVhELE1BV087QUFDSCxVQUFPLEtBQVAsSUFBZ0IsRUFBaEI7QUFDQSxPQUFJLFdBQVcsSUFBSSxXQUFKLENBQ2xCLFVBRGtCLEVBRWxCLEVBQUMsUUFBUTtBQUNMLGFBQVEsTUFESDtBQUVMLFlBQU8sT0FBTyxpQkFGVDtBQUdMLGVBQVUsT0FBTztBQUhaLEtBQVQsRUFGa0IsQ0FBZjtBQVFBLFlBQVMsYUFBVCxDQUF1QixRQUF2QjtBQUNIO0FBQ0QsU0FBTyxpQkFBUDtBQUNJOztBQUVELFVBQVMsZ0JBQVQsQ0FBMEIsY0FBMUIsRUFBMEMsY0FBMUM7QUFDQSxVQUFTLGdCQUFULENBQTBCLGdCQUExQixFQUE0QyxnQkFBNUM7QUFDSCxDQWpGRCIsImZpbGUiOiJnYW1lbG9naWMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIGdhbWVsb2dpYy5qc1xuICovXG5cbihmdW5jdGlvbigpIHtcbiAgICAvL1xuXG4gICAgdmFyIEVQU0lMT04gPSAxMDAwO1xuICAgIHZhciBjb25maWcgPSB7fTtcblxuICAgIC8vIEFjdGlvbnMgcGVyZm9ybWVkIHdoZW4gY3VycmVudCBnYW1lIHNldHRpbmdzIHJlY2lldmVkXG4gICAgZnVuY3Rpb24gb25BZ1NldHVwRXZlbnQoZXZlbnQpIHtcblx0Y29uc29sZS5sb2coJ2FnU2V0dXBFdmVudDogJyArIEpTT04uc3RyaW5naWZ5KGV2ZW50LmRldGFpbCkpO1xuXHQvL1xuICAgIFx0Y29uZmlnLm1vdmVtZW50cyA9IGV2ZW50LmRldGFpbC5jb21tYW5kcztcblx0Ly9cblx0bGV0IGF1ZGlvRmlsZVVSTCA9ICdodHRwOi8vJyArIHdpbmRvdy5sb2NhdGlvbi5ob3N0bmFtZSArICcvc29uZ3MvJyArIGV2ZW50LmRldGFpbC5zb25nO1xuXHQvLyBsZXQgYXVkaW9GaWxlVVJMID0gJy4uL2F1ZGlvLycgKyBldmVudC5kZXRhaWwuc29uZztcblx0Y29uc29sZS5sb2coJ2F1ZGlvIGZpbGUgdXJsOiAnICsgYXVkaW9GaWxlVVJMKTtcblx0Y29uZmlnLmF1ZGlvID0gbmV3IEhvd2woe1xuXHQgICAgdXJsczogW2F1ZGlvRmlsZVVSTF0sXG5cdCAgICBhdXRvcGxheTogZmFsc2UsXG5cdCAgICB2b2x1bWU6IDAuOCxcblx0fSk7XG5cdC8vIEdlbmVyYXRlIG5ldyBldmVudCBmb3IgdGhlIHZpZXcuXG5cdHZhciBuZXdFdmVudCA9IG5ldyBDdXN0b21FdmVudChcblx0ICAgICdnbFNldHVwRXZlbnQnLFxuXHQgICAge2RldGFpbDoge3Nvbmc6IGV2ZW50LmRldGFpbC5zb25nLCBicG06IGV2ZW50LmRldGFpbC5icG0sIGNvbW1hbmRzOiBldmVudC5kZXRhaWwuY29tbWFuZHMsIG11c2ljOiBjb25maWcuYXVkaW99fVxuXHQpO1xuXHRkb2N1bWVudC5kaXNwYXRjaEV2ZW50KG5ld0V2ZW50KTtcblx0Ly8gQlBNLCBtaW5JbnRlcnZhbCwgYmVnaW5uaW5nIG9mZnNldFxuXHRjb25maWcuYnBtID0gZXZlbnQuZGV0YWlsLmJwbTtcblx0Y29uZmlnLm1pbkludGVydmFsID0gNjAwMDAgLyBjb25maWcuYnBtO1xuXHRjb25maWcuYmVnaW5uaW5nT2Zmc2V0ID0gZXZlbnQuZGV0YWlsLm9mZnNldDtcblx0Ly8gU3RhcnQuXG5cdGNvbmZpZy5zY29yZSA9IDA7XG5cdGNvbmZpZy5zdGFydERhdGUgPSBEYXRlLm5vdygpO1xuXHRjb25maWcuZGlzcGxheWVkSW5kZXggPSAwO1xuXHRjb25maWcubGFzdFJlY2VpdmVkSW5kZXggPSAwO1xuXHRmdW5jdGlvbiBzZW5kTW92ZW1lbnQoKSB7XG5cdCAgICB2YXIgbmV3RXZlbnQgPSBuZXcgQ3VzdG9tRXZlbnQoXG5cdFx0J2dsQWRkTW92ZW1lbnQnLFxuXHRcdHtkZXRhaWw6IGNvbmZpZy5tb3ZlbWVudHNbY29uZmlnLmRpc3BsYXllZEluZGV4XX1cblx0ICAgICk7XG5cdCAgICBjb25zb2xlLmxvZyhuZXdFdmVudCk7XG5cdCAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KG5ld0V2ZW50KTtcblx0ICAgIHNldFRpbWVvdXQoc2VuZE1vdmVtZW50LCBjb25maWcubWluSW50ZXJ2YWwpO1xuXHR9XG5cdHNldFRpbWVvdXQoc2VuZE1vdmVtZW50LCBjb25maWcuYmVnaW5uaW5nT2Zmc2V0KTtcblx0Y29uZmlnLmF1ZGlvLnN0YXJ0KCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25BZ0NvbW1hbmRFdmVudChldmVudCkge1xuICAgIFx0Y29uc29sZS5sb2coJ2FnQ29tbWFuZEV2ZW50OiAnICsgSlNPTi5zdHJpbmdpZnkoZXZlbnQuZGV0YWlsKSk7XG5cdC8vIENvdW50IHRoZSB0aW1lIGZvciB0aGUgY3VycmVudCBtb3ZlbWVudC5cblx0dmFyIHRpbWUgPSBjb25maWcuc3RhcnREYXRlICsgY29uZmlnLmJlZ2lubmluZ09mZnNldCArIGNvbmZpZy5taW5JbnRlcnZhbCAqIGNvbmZpZy5sYXN0UmVjZWl2ZWRJbmRleDtcblx0Ly8gQ291bnQgbmV3IHNjb3JlLlxuXHRpZiAoTWF0aC5hYnModGltZSAtIGV2ZW50LmRldGFpbC50aW1lKSA8IEVQU0lMT04pIHtcblx0ICAgIGNvbmZpZy5zY29yZSArPSAxMDA7XG5cdCAgICB2YXIgbmV3RXZlbnQgPSBuZXcgQ3VzdG9tRXZlbnQoXG5cdFx0J2dsU3RhdHVzJyxcblx0XHR7ZGV0YWlsOiB7XG5cdFx0ICAgIHN0YXR1czogXCJzdWNjZXNzXCIsXG5cdFx0ICAgIGluZGV4OiBjb25maWcubGFzdFJlY2VpdmVkSW5kZXgsXG5cdFx0ICAgIG5ld1Njb3JlOiBjb25maWcuc2NvcmVcblx0XHR9fVxuXHQgICAgKTtcblx0ICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQobmV3RXZlbnQpO1xuXHR9IGVsc2Uge1xuXHQgICAgY29uZmlnLnNjb3JlIC09IDEwO1xuXHQgICAgdmFyIG5ld0V2ZW50ID0gbmV3IEN1c3RvbUV2ZW50KFxuXHRcdCdnbFN0YXR1cycsXG5cdFx0e2RldGFpbDoge1xuXHRcdCAgICBzdGF0dXM6IFwiZmFpbFwiLFxuXHRcdCAgICBpbmRleDogY29uZmlnLmxhc3RSZWNlaXZlZEluZGV4LFxuXHRcdCAgICBuZXdTY29yZTogY29uZmlnLnNjb3JlXG5cdFx0fX1cblx0ICAgICk7XG5cdCAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KG5ld0V2ZW50KTtcblx0fVxuXHRjb25maWcubGFzdFJlY2VpdmVkSW5kZXgrKztcbiAgICB9XG5cbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdhZ1NldHVwRXZlbnQnLCBvbkFnU2V0dXBFdmVudCk7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignYWdDb21tYW5kRXZlbnQnLCBvbkFnQ29tbWFuZEV2ZW50KTtcbn0pKCk7Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
